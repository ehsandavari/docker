version: '3.9'

services:
  postgresql:
    image: postgres:latest
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgresql:/var/lib/postgresql/data
    networks:
      - backend


  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgresql
    networks:
      - backend


  mysql:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: '123456'
    ports:
      - '3306:3306'
    volumes:
      - mysql:/var/lib/mysql
    networks:
      - backend


  mongodb:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    ports:
      - "27017:27017"
    volumes:
      - mongodb:/data/db
      - mongodb:/data/configdb
    networks:
      - backend


  mongo-express:
    image: mongo-express:latest
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - backend


  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis:/data
    networks:
      - backend


  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "9251:8081"
    depends_on:
      - redis
    networks:
      - backend


  rabbitmq:
    image: rabbitmq:3.11-management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq


  nats:
    image: nats:latest
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - backend


  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    volumes:
      - zookeeper:/bitnami
    networks:
      - backend


  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka:/bitnami
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
    depends_on:
      - zookeeper
    networks:
      - backend


  kafka-ui:
    image: provectuslabs/kafka-ui:v0.6.0
    ports:
      - "5555:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: http://kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: http://zookeeper:2181
    depends_on:
      - kafka
    networks:
      - backend


  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      COLLECTOR_OTLP_ENABLED: true
    volumes:
      - jaeger:/tmp
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    restart: on-failure
    user: root
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - backend

  node_exporter:
    restart: on-failure
    image: prom/node-exporter:latest
    ports:
      - '9101:9100'
    networks:
      - backend

  grafana:
    restart: on-failure
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    networks:
      - backend

networks:
  backend:

volumes:
  postgresql:
  mysql:
  pgadmin:
  mongodb:
  redis:
  rabbitmq:
  zookeeper:
  kafka:
  jaeger:
